# Infinite loop.  Only expected not to crash, but the infinite loop is
# rather inconvenient on its own.
js1_5/GC/regress-346794.js

# These try to use infinite amounts of memory.  We handle them properly
# and only fail due to running out of memory.
js1_5/Function/regress-338001.js
js1_5/Function/regress-338121-01.js
js1_5/Function/regress-338121-02.js
js1_5/Function/regress-338121-03.js
js1_5/Regress/regress-303213.js
js1_5/Regress/regress-312588.js

# This fails with 512 MB memory and succeeds with 1024 MB memory on
# 64-bit.  It doesn't seem to be a particularly useful test anyway, it
# just creates a long list of linked objects.
js1_5/Regress/regress-203278-1.js

# Compares performance between trivial loops working on local
# variables and global variables.  Arbitrarily decides that global
# ones should not be more than 2.5 times slower.  In bytecode mode,
# they should probably be more than 2.5 times slower in carakan,
# whereas in native mode they should be about as fast, in practice.
js1_5/Regress/regress-169559.js

# This tests that parsing of large generated scripts (via eval())
# isn't O(n^2).  And it isn't.  But there's so much noise that the
# test usually fails anyway.
js1_5/Regress/regress-416628.js
