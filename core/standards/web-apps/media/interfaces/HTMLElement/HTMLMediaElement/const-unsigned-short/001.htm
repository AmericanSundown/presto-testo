<!doctype html>
<title>Constants of HTMLMediaElement</title>
<pre>FAIL (script didn't run)</pre>
<video><source></video><audio></audio>
<script>
var log = '';
var i = 0;
function assert(test, reference) {
  i++;
  try {
    var result = eval(test);
    if (result != reference)
      log += i + ': ' + test + ' (got ' + result + ', expected ' + reference + ')\n';
  } catch(e) {
    log += i + ': ' + test + ' (' + e.message + ')\n';
  }
}

assert('HTMLElement.NETWORK_EMPTY', undefined);
assert('HTMLElement.NETWORK_IDLE', undefined);
assert('HTMLElement.NETWORK_LOADING', undefined);
assert('HTMLElement.NETWORK_NO_SOURCE', undefined);
assert('HTMLElement.HAVE_NOTHING', undefined);
assert('HTMLElement.HAVE_METADATA', undefined);
assert('HTMLElement.HAVE_CURRENT_DATA', undefined);
assert('HTMLElement.HAVE_FUTURE_DATA', undefined);
assert('HTMLElement.HAVE_ENOUGH_DATA', undefined);
assert('HTMLMediaElement.NETWORK_EMPTY', 0);
assert('HTMLMediaElement.NETWORK_IDLE', 1);
assert('HTMLMediaElement.NETWORK_LOADING', 2);
assert('HTMLMediaElement.NETWORK_NO_SOURCE', 3);
assert('HTMLMediaElement.HAVE_NOTHING', 0);
assert('HTMLMediaElement.HAVE_METADATA', 1);
assert('HTMLMediaElement.HAVE_CURRENT_DATA', 2);
assert('HTMLMediaElement.HAVE_FUTURE_DATA', 3);
assert('HTMLMediaElement.HAVE_ENOUGH_DATA', 4);
assert('HTMLVideoElement.NETWORK_EMPTY', undefined);
assert('HTMLVideoElement.NETWORK_IDLE', undefined);
assert('HTMLVideoElement.NETWORK_LOADING', undefined);
assert('HTMLVideoElement.NETWORK_NO_SOURCE', undefined);
assert('HTMLVideoElement.HAVE_NOTHING', undefined);
assert('HTMLVideoElement.HAVE_METADATA', undefined);
assert('HTMLVideoElement.HAVE_CURRENT_DATA', undefined);
assert('HTMLVideoElement.HAVE_FUTURE_DATA', undefined);
assert('HTMLVideoElement.HAVE_ENOUGH_DATA', undefined);
assert('HTMLAudioElement.NETWORK_EMPTY', undefined);
assert('HTMLAudioElement.NETWORK_IDLE', undefined);
assert('HTMLAudioElement.NETWORK_LOADING', undefined);
assert('HTMLAudioElement.NETWORK_NO_SOURCE', undefined);
assert('HTMLAudioElement.HAVE_NOTHING', undefined);
assert('HTMLAudioElement.HAVE_METADATA', undefined);
assert('HTMLAudioElement.HAVE_CURRENT_DATA', undefined);
assert('HTMLAudioElement.HAVE_FUTURE_DATA', undefined);
assert('HTMLAudioElement.HAVE_ENOUGH_DATA', undefined);
assert('HTMLSourceElement.NETWORK_EMPTY', undefined);
assert('HTMLSourceElement.NETWORK_IDLE', undefined);
assert('HTMLSourceElement.NETWORK_LOADING', undefined);
assert('HTMLSourceElement.NETWORK_NO_SOURCE', undefined);
assert('HTMLSourceElement.HAVE_NOTHING', undefined);
assert('HTMLSourceElement.HAVE_METADATA', undefined);
assert('HTMLSourceElement.HAVE_CURRENT_DATA', undefined);
assert('HTMLSourceElement.HAVE_FUTURE_DATA', undefined);
assert('HTMLSourceElement.HAVE_ENOUGH_DATA', undefined);
assert('document.body.NETWORK_EMPTY', undefined);
assert('document.body.NETWORK_IDLE', undefined);
assert('document.body.NETWORK_LOADING', undefined);
assert('document.body.NETWORK_NO_SOURCE', undefined);
assert('document.body.HAVE_NOTHING', undefined);             
assert('document.body.HAVE_METADATA', undefined);
assert('document.body.HAVE_CURRENT_DATA', undefined);
assert('document.body.HAVE_FUTURE_DATA', undefined);
assert('document.body.HAVE_ENOUGH_DATA', undefined);
assert('document.getElementsByTagName("video")[0].NETWORK_EMPTY', 0);
assert('document.getElementsByTagName("video")[0].NETWORK_IDLE', 1);
assert('document.getElementsByTagName("video")[0].NETWORK_LOADING', 2);
assert('document.getElementsByTagName("video")[0].NETWORK_NO_SOURCE', 3);
assert('document.getElementsByTagName("video")[0].HAVE_NOTHING', 0);
assert('document.getElementsByTagName("video")[0].HAVE_METADATA', 1);
assert('document.getElementsByTagName("video")[0].HAVE_CURRENT_DATA', 2);
assert('document.getElementsByTagName("video")[0].HAVE_FUTURE_DATA', 3);
assert('document.getElementsByTagName("video")[0].HAVE_ENOUGH_DATA', 4);
assert('document.getElementsByTagName("audio")[0].NETWORK_EMPTY', 0);
assert('document.getElementsByTagName("audio")[0].NETWORK_IDLE', 1);
assert('document.getElementsByTagName("audio")[0].NETWORK_LOADING', 2);
assert('document.getElementsByTagName("audio")[0].NETWORK_NO_SOURCE', 3);
assert('document.getElementsByTagName("audio")[0].HAVE_NOTHING', 0);
assert('document.getElementsByTagName("audio")[0].HAVE_METADATA', 1);
assert('document.getElementsByTagName("audio")[0].HAVE_CURRENT_DATA', 2);
assert('document.getElementsByTagName("audio")[0].HAVE_FUTURE_DATA', 3);
assert('document.getElementsByTagName("audio")[0].HAVE_ENOUGH_DATA', 4);
assert('document.getElementsByTagName("source")[0].NETWORK_EMPTY', undefined);
assert('document.getElementsByTagName("source")[0].NETWORK_IDLE', undefined);
assert('document.getElementsByTagName("source")[0].NETWORK_LOADING', undefined);
assert('document.getElementsByTagName("source")[0].NETWORK_NO_SOURCE', undefined);
assert('document.getElementsByTagName("source")[0].HAVE_NOTHING', undefined);
assert('document.getElementsByTagName("source")[0].HAVE_METADATA', undefined);
assert('document.getElementsByTagName("source")[0].HAVE_CURRENT_DATA', undefined);
assert('document.getElementsByTagName("source")[0].HAVE_FUTURE_DATA', undefined);
assert('document.getElementsByTagName("source")[0].HAVE_ENOUGH_DATA', undefined);
assert('HTMLElement.prototype.NETWORK_EMPTY', undefined);
assert('HTMLElement.prototype.NETWORK_IDLE', undefined);
assert('HTMLElement.prototype.NETWORK_LOADING', undefined);
assert('HTMLElement.prototype.NETWORK_NO_SOURCE', undefined);
assert('HTMLElement.prototype.HAVE_NOTHING', undefined);
assert('HTMLElement.prototype.HAVE_METADATA', undefined);
assert('HTMLElement.prototype.HAVE_CURRENT_DATA', undefined);
assert('HTMLElement.prototype.HAVE_FUTURE_DATA', undefined);
assert('HTMLElement.prototype.HAVE_ENOUGH_DATA', undefined);
assert('HTMLMediaElement.prototype.NETWORK_EMPTY', 0);
assert('HTMLMediaElement.prototype.NETWORK_IDLE', 1);
assert('HTMLMediaElement.prototype.NETWORK_LOADING', 2);
assert('HTMLMediaElement.prototype.NETWORK_NO_SOURCE', 3);
assert('HTMLMediaElement.prototype.HAVE_NOTHING', 0);
assert('HTMLMediaElement.prototype.HAVE_METADATA', 1);
assert('HTMLMediaElement.prototype.HAVE_CURRENT_DATA', 2);
assert('HTMLMediaElement.prototype.HAVE_FUTURE_DATA', 3);
assert('HTMLMediaElement.prototype.HAVE_ENOUGH_DATA', 4);
assert('HTMLVideoElement.prototype.NETWORK_EMPTY', 0);
assert('HTMLVideoElement.prototype.NETWORK_IDLE', 1);
assert('HTMLVideoElement.prototype.NETWORK_LOADING', 2);
assert('HTMLVideoElement.prototype.NETWORK_NO_SOURCE', 3);
assert('HTMLVideoElement.prototype.HAVE_NOTHING', 0);
assert('HTMLVideoElement.prototype.HAVE_METADATA', 1);
assert('HTMLVideoElement.prototype.HAVE_CURRENT_DATA', 2);
assert('HTMLVideoElement.prototype.HAVE_FUTURE_DATA', 3);
assert('HTMLVideoElement.prototype.HAVE_ENOUGH_DATA', 4);
assert('HTMLAudioElement.prototype.NETWORK_EMPTY', 0);
assert('HTMLAudioElement.prototype.NETWORK_IDLE', 1);
assert('HTMLAudioElement.prototype.NETWORK_LOADING', 2);
assert('HTMLAudioElement.prototype.NETWORK_NO_SOURCE', 3);
assert('HTMLAudioElement.prototype.HAVE_NOTHING', 0);
assert('HTMLAudioElement.prototype.HAVE_METADATA', 1);
assert('HTMLAudioElement.prototype.HAVE_CURRENT_DATA', 2);
assert('HTMLAudioElement.prototype.HAVE_FUTURE_DATA', 3);
assert('HTMLAudioElement.prototype.HAVE_ENOUGH_DATA', 4);
assert('HTMLSourceElement.prototype.NETWORK_EMPTY', undefined);
assert('HTMLSourceElement.prototype.NETWORK_IDLE', undefined);
assert('HTMLSourceElement.prototype.NETWORK_LOADING', undefined);
assert('HTMLSourceElement.prototype.NETWORK_NO_SOURCE', undefined);
assert('HTMLSourceElement.prototype.HAVE_NOTHING', undefined);
assert('HTMLSourceElement.prototype.HAVE_METADATA', undefined);
assert('HTMLSourceElement.prototype.HAVE_CURRENT_DATA', undefined);
assert('HTMLSourceElement.prototype.HAVE_FUTURE_DATA', undefined);
assert('HTMLSourceElement.prototype.HAVE_ENOUGH_DATA', undefined);

var passed = log == '';
document.getElementsByTagName('pre')[0].firstChild.data = passed ? 'PASS' : 'FAIL\n' + log;
try{top.opener.rr(passed)}catch(e){}
</script>